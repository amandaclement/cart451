/* 
----------------------------------------------------------------------------------------------------------------
    COMP 451: EXERCISE II
    Concept: analyzing the words that we often reject (or distort) during language processing
    Language processed: lyrics from 7 Radiohead songs
    By Amanda Clement

    This file is responsible for the creation of the visualization.
----------------------------------------------------------------------------------------------------------------
*/ 

// array of "rejected" words (the ones disregarded during language processing in languageProcessing.js file)
let rejectedWords = [
    'to',
    'is',
    'that',
    'its',
    'itself',
    'if',
    'again',
    'where',
    'when',
    'something',
    'it',
    'this',
    'the',
    'these',
    'could',
    'such',
    'looks',
    'their',
    'she',
    'into',
    'from',
    'but',
    'my',
    'you',
    'not',
    'comes',
    'there',
    'who',
    'myself',
    'me',
    'they',
    'on',
    'her',
    'no',
    'am',
    'of',
    'what',
    'him',
    'going',
    'are',
    'any',
    'we',
    'then',
    'as',
    'your',
    'yourself',
    'given',
    'i',
    'all',
    'onto',
    'for',
    'before',
    'with',
    'always',
    'enough',
    're',
    'used',
    'in',
    'here',
    'through',
    'please',
    's',
    'a',
    'he',
    'off',
    'under',
    'one',
    'will',
    'now',
    'like',
    'gone',
    'out',
    'can',
    'let',
    'around',
    'so',
    'whole',
    'just',
    'know',
    'us',
    'still',
    'help',
    'look',
    'do',
    'man',
    'down',
    'have',
    'see',
    'take'
];

// array of "rejected" word types, which align with words in rejectedWords array (e.g. rejectedWords[0]'s type is wordTypesRejected[0])
let wordTypesRejected = [
    'TO',
    'VBZ',
    'IN',
    'PRP$',
    'PRP',
    'IN',
    'RB',
    'WRB',
    'WRB',
    'VBG',
    'PRP',
    'DT',
    'DT',
    'DT',
    'MD',
    'JJ',
    'VBZ',
    'PRP$',
    'PRP',
    'IN',
    'IN',
    'CC',
    'PRP$',
    'PRP',
    'RB',
    'VBZ',
    'EX',
    'WP',
    'PRP',
    'PRP',
    'PRP',
    'IN',
    'PRP',
    'DT',
    'VBP',
    'IN',
    'WP',
    'PRP',
    'VBG',
    'VBP',
    'DT',
    'PRP',
    'RB',
    'IN',
    'PRP',
    'PRP',
    'VBN',
    'NN',
    'DT',
    'IN',
    'IN',
    'IN',
    'IN',
    'RB',
    'RB',
    'NN',
    'VBN',
    'IN',
    'RB',
    'IN',
    'VB',
    'PRP',
    'DT',
    'PRP',
    'IN',
    'IN',
    'N',
    'MD',
    'RB',
    'IN',
    'VBN',
    'IN',
    'MD',
    'VB',
    'IN',
    'RB',
    'JJ',
    'RB',
    'VB',
    'PRP',
    'RB',
    'VB',
    'VB',
    'VBP',
    'NN',
    'RB',
    'VBP',
    'VB',
    'VB'
];

// array of all unique words from lyrics found in lyrics.txt file
let allWords = [
    'don',
    't',
    'get',
    'any',
    'big',
    'ideas',
    'they',
    're',
    'not',
    'gonna',
    'happen',
    'you',
    'paint',
    'yourself',
    'white',
    'and',
    'fill',
    'up',
    'with',
    'noise',
    'but',
    'there',
    'll',
    'be',
    'something',
    'missing',
    'now',
    'that',
    'found',
    'it',
    's',
    'gone',
    'feel',
    've',
    'off',
    'the',
    'rails',
    'so',
    'go',
    'to',
    'hell',
    'for',
    'what',
    'your',
    'dirty',
    'mind',
    'is',
    'thinking',
    '0',
    'transport',
    'motorways',
    'tramlines',
    'starting',
    'then',
    'stopping',
    'taking',
    'landing',
    'emptiest',
    'of',
    'feelings',
    'disappointed',
    'people',
    'clinging',
    'onto',
    'bottles',
    'when',
    'comes',
    'disappointing',
    'let',
    'down',
    'hanging',
    'around',
    'crushed',
    'like',
    'a',
    'bug',
    'in',
    'ground',
    'shell',
    'smashed',
    'juices',
    'flowing',
    'wings',
    'twitch',
    'legs',
    'are',
    'going',
    'sentimental',
    'always',
    'ends',
    'drivel',
    'one',
    'day',
    'i',
    'am',
    'grow',
    'chemical',
    'reaction',
    'hysterical',
    'useless',
    'know',
    'where',
    'floor',
    'collapsing',
    'floating',
    'bouncing',
    'back',
    'heart',
    'full',
    'landfill',
    'job',
    'slowly',
    'kills',
    'bruises',
    'won',
    'heal',
    'look',
    'tired',
    'unhappy',
    'bring',
    'government',
    'speak',
    'us',
    'take',
    'quiet',
    'life',
    'handshake',
    'carbon',
    'monoxide',
    'no',
    'alarms',
    'surprises',
    'silent',
    'this',
    'my',
    'final',
    'fit',
    'bellyache',
    'please',
    'such',
    'pretty',
    'house',
    'garden',
    'me',
    'out',
    'here',
    'rows',
    'houses',
    'all',
    'bearing',
    'on',
    'can',
    'their',
    'blue',
    'hands',
    'touching',
    'these',
    'things',
    'into',
    'position',
    'we',
    'swallow',
    'whole',
    'fade',
    'again',
    'machine',
    'will',
    'communicate',
    'thoughts',
    'strain',
    'under',
    'world',
    'child',
    'form',
    'circle',
    'before',
    'cracked',
    'eggs',
    'dead',
    'birds',
    'scream',
    'as',
    'fight',
    'death',
    'see',
    'its',
    'beady',
    'eyes',
    'immerse',
    'soul',
    'love',
    'drown',
    'beliefs',
    'have',
    'babies',
    'dress',
    'niece',
    'wash',
    'swollen',
    'feet',
    'just',
    'leave',
    'm',
    'living',
    'killing',
    'time',
    'tiny',
    'crazy',
    'kitten',
    'smile',
    'true',
    'waits',
    'haunted',
    'attics',
    'lives',
    'lollipops',
    'crisps',
    'her',
    'green',
    'plastic',
    'watering',
    'fake',
    'chinese',
    'rubber',
    'plant',
    'earth',
    'she',
    'bought',
    'from',
    'man',
    'town',
    'plans',
    'rid',
    'itself',
    'wears',
    'broken',
    'polystyrene',
    'who',
    'crumbles',
    'burns',
    'he',
    'used',
    'do',
    'surgery',
    'girls',
    'eighties',
    'gravity',
    'wins',
    'him',
    'looks',
    'real',
    'thing',
    'tastes',
    'help',
    'feeling',
    'could',
    'blow',
    'through',
    'ceiling',
    'if',
    'turn',
    'run',
    'wanted',
    'karma',
    'police',
    'arrest',
    'talks',
    'maths',
    'buzzes',
    'fridge',
    'detuned',
    'radio',
    'girl',
    'hitler',
    'hairdo',
    'making',
    'ill',
    'crashed',
    'party',
    'mess',
    'given',
    'enough',
    'still',
    'payroll',
    'minute',
    'lost',
    'myself',
    'phew'
];

// array of word types, which align with words in allWords array (e.g. allWords[0]'s type is wordTypesAll[0])
let wordTypesAll = [
    'VB',
    'NN',
    'VB',
    'DT',
    'JJ',
    'NNS',
    'PRP',
    'NN',
    'RB',
    'VBG',
    'VB',
    'PRP',
    'NN',
    'PRP',
    'JJ',
    'CC',
    'VB',
    'IN',
    'IN',
    'NN',
    'CC',
    'EX',
    'N',
    'VB',
    'VBG',
    'VBG',
    'RB',
    'IN',
    'VBD',
    'PRP',
    'PRP',
    'VBN',
    'VB',
    'N',
    'IN',
    'DT',
    'NNS',
    'RB',
    'VB',
    'TO',
    'NN',
    'IN',
    'WP',
    'PRP$',
    'JJ',
    'NN',
    'VBZ',
    'VBG',
    'N',
    'NN',
    'N',
    'N',
    'VBG',
    'RB',
    'VBG',
    'VBG',
    'VBG',
    'N',
    'IN',
    'NNS',
    'VBN',
    'NNS',
    'VBG',
    'IN',
    'NNS',
    'WRB',
    'VBZ',
    'JJ',
    'VB',
    'RB',
    'VBG',
    'IN',
    'VBN',
    'IN',
    'DT',
    'NN',
    'IN',
    'NN',
    'NN',
    'VBD',
    'NNS',
    'VBG',
    'NNS',
    'NN',
    'NNS',
    'VBP',
    'VBG',
    'JJ',
    'RB',
    'NNS',
    'N',
    'N',
    'NN',
    'NN',
    'VBP',
    'VB',
    'JJ',
    'NN',
    'JJ',
    'JJ',
    'VB',
    'WRB',
    'NN',
    'VBG',
    'VBG',
    'VBG',
    'RB',
    'NN',
    'JJ',
    'NN',
    'NN',
    'RB',
    'VBZ',
    'NNS',
    'VBD',
    'VB',
    'VB',
    'VBN',
    'JJ',
    'VB',
    'NN',
    'VB',
    'PRP',
    'VB',
    'JJ',
    'NN',
    'NN',
    'NN',
    'NN',
    'DT',
    'NNS',
    'NNS',
    'JJ',
    'DT',
    'PRP$',
    'JJ',
    'VB',
    'N',
    'VB',
    'JJ',
    'RB',
    'NN',
    'NN',
    'PRP',
    'IN',
    'RB',
    'NNS',
    'NNS',
    'DT',
    'VBG',
    'IN',
    'MD',
    'PRP$',
    'JJ',
    'NNS',
    'VBG',
    'DT',
    'NNS',
    'IN',
    'NN',
    'PRP',
    'VB',
    'JJ',
    'VB',
    'RB',
    'NN',
    'MD',
    'VB',
    'NNS',
    'NN',
    'IN',
    'NN',
    'NN',
    'NN',
    'NN',
    'IN',
    'VBD',
    'NNS',
    'JJ',
    'NNS',
    'VB',
    'IN',
    'NN',
    'NN',
    'VB',
    'PRP$',
    'JJ',
    'NNS',
    'N',
    'NN',
    'NN',
    'VB',
    'NNS',
    'VBP',
    'NNS',
    'NN',
    'NN',
    'NN',
    'JJ',
    'NNS',
    'RB',
    'VB',
    'NN',
    'VBG',
    'VBG',
    'NN',
    'JJ',
    'JJ',
    'NN',
    'NN',
    'JJ',
    'VBZ',
    'VBN',
    'NNS',
    'NNS',
    'N',
    'N',
    'PRP$',
    'JJ',
    'NN',
    'VBG',
    'JJ',
    'N',
    'NN',
    'NN',
    'NN',
    'PRP',
    'VBD',
    'IN',
    'NN',
    'NN',
    'NNS',
    'JJ',
    'PRP',
    'VBZ',
    'VBN',
    'NN',
    'WP',
    'VBZ',
    'NNS',
    'PRP',
    'VBN',
    'VBP',
    'NN',
    'NNS',
    'NNS',
    'NN',
    'VBZ',
    'PRP',
    'VBZ',
    'JJ',
    'VBG',
    'NNS',
    'VB',
    'VBG',
    'MD',
    'NN',
    'IN',
    'VBG',
    'IN',
    'VB',
    'VB',
    'VBD',
    'N',
    'NN',
    'NN',
    'NNS',
    'N',
    'NNS',
    'NN',
    'N',
    'NN',
    'NN',
    'N',
    'N',
    'VBG',
    'JJ',
    'VBD',
    'NN',
    'NN',
    'VBN',
    'RB',
    'RB',
    'NN',
    'NN',
    'VBD',
    'PRP',
    'N'
];

let myCanvas;
let wordsHidden = [];
let wordsFullset = [];

// "shown" (foreground) words
function WordFullset(wordText, wordType) {
    this.x = random(0, windowWidth - 50);
    this.y = random(0, windowHeight - 10);

    this.display = function() 
    {
        let word = createP(wordText);
        word.style('font-size', '15px');
        if (wordType == "TO" || wordType == "IN")
        {
            word.style('font-family', 'Lora');
            word.style('font-style', 'italic');
        }
        if (wordType == "DT")
            word.style('font-family', 'Playfair Display');
        if (wordType == "VB" || wordType == "VBZ" || wordType == "VBG" || wordType == "VBP")
        {
            word.style('font-family', 'Poppins');
            word.style('font-style', 'italic');
        }
        if (wordType == "PRP" || wordType == "PRP$" || wordType == "VBP")
            word.style('font-family', 'Roboto Mono');
        if (wordType == "RB" || wordType == "MD")
            word.style('font-family', 'Nova Mono');
        if (wordType == "N" || wordType == "NN" || wordType == "NNS")
            word.style('font-family', 'M PLUS Rounded 1c');
        // all other cases use default font
        word.position(this.x, this.y);
    }
}

// "rejected" (background) words 
function WordRejected(wordText, wordType) {
    this.x = random(0, windowWidth - 50);
    this.y = random(0, windowHeight - 10);
        
    this.display = function() 
    {
        let word = createP(wordText);
        word.style('color', '#FFF');
        word.style('font-size', '15px');
        if (wordType == "TO" || wordType == "IN")
        {
            word.style('font-family', 'Lora');
            word.style('font-style', 'italic');
        }
        if (wordType == "DT")
            word.style('font-family', 'Playfair Display');
        if (wordType == "VB" || wordType == "VBZ" || wordType == "VBG" || wordType == "VBP")
        {
            word.style('font-family', 'Poppins');
            word.style('font-style', 'italic');
        }
        if (wordType == "PRP" || wordType == "PRP$" || wordType == "VBP")
            word.style('font-family', 'Roboto Mono');
        if (wordType == "RB" || wordType == "MD")
            word.style('font-family', 'Nova Mono');
        if (wordType == "N" || wordType == "NN" || wordType == "NNS")
            word.style('font-family', 'M PLUS Rounded 1c');
        // all other cases use default font

        word.position(this.x, this.y);
    }
}

function setup() {
   myCanvas = createCanvas(windowWidth, windowHeight);
   myCanvas.parent('myCanvas');

   // use the arrays to create/display objects
   for (let i = 0; i < rejectedWords.length; i++)
        wordsHidden.push(new WordRejected(rejectedWords[i], wordTypesRejected[i])); 

   for (let i = 0; i < wordsHidden.length; i++) 
         wordsHidden[i].display();

    for (let i = 0; i < allWords.length; i++)
        wordsFullset.push(new WordFullset(allWords[i], wordTypesAll[i])); 
    
    for (let i = 0; i < wordsFullset.length; i++) 
        wordsFullset[i].display();
}

function draw() {
    fill(0, 102, 153, 51);
    noStroke();

    // creating cursor circle that "reveals" background (rejected) words
    for (let x = 0; x < width; x += 10) {
      for (let y = 0; y < height; y += 10) {
        let d = dist(x, y, mouseX, mouseY); // calculate distance of this cell to the mouse
        let c = map(d, 70, 200, 0, 255);    // use this distance to color the cell
        fill(c);
        rect(x, y, 10, 10);
      }
    }
}


